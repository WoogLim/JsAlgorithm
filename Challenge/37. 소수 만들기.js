// 문제 설명
// 주어진 숫자 중 3개의 수를 더했을 때 소수가 되는 경우의 개수를 구하려고 합니다. 숫자들이 들어있는 배열 nums가 매개변수로 주어질 때
// nums에 있는 숫자들 중 서로 다른 3개를 골라 더했을 때 소수가 되는 경우의 개수를 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// nums에 들어있는 숫자의 개수는 3개 이상 50개 이하입니다.
// nums의 각 원소는 1 이상 1,000 이하의 자연수이며, 중복된 숫자가 들어있지 않습니다.
// 입출력 예
// nums	result
// [1,2,3,4]	1 // 1 2 3 4 

// 입출력 예 설명
// 입출력 예 #1
// [1,2,4]를 이용해서 7을 만들 수 있습니다.

// 입출력 예 #2
// https://programmers.co.kr/learn/courses/30/lessons/12977


// [1,2,7,6,4]	4 // 20 
// 1 2 7 = 10
// 1 2 6 = 9
// 1 2 4 = 7  O
// 1 7 6 = 14
// 1 7 4 = 12
// 1 6 4 = 11 O
// 2 7 6 = 15
// 2 7 4 = 13 O
// 2 6 4 = 12
// 7 6 4 = 17 O

// 5
// 0 1 2
// 0 1 3
// 0 1 4
// 0 2 3
// 0 2 4
// 0 3 4
// 1 2 3
// 1 2 4
// 1 3 4
// 2 3 4

// [1,2,3,4]	1? // 1 2 3 4 
// 1 2 3 =  6
// 1 2 4 =  7 1
// 1 3 4 =  8
// 2 3 4 =  9

// 0 1 2
// 0 1 3
// 0 2 3 3
// 2 3 4 1

// [1,4,6]
// 1 4 6 = 11
// 1 6 4 = 11
// 4 1 6 = 11
// 4 6 1 = 11 
// 6 1 4 = 11
// 6 4 1 = 11

// 소수 경우의 수
// 3 ~ 50
// 3 -> 7
// (3 * 2 * 1) /3 /2 = 1
// 4 -> 4
// (4 * 3 * 2) /3 /2 = 4
// 5 -> 10
// (5 * 4 * 3) /3 /2 = 10
// 6 -> 20
// (6 * 5 * 4) /3 /2 = 20

function solution(nums){
  let answer = 0;
  for(let i = 0 ; i < nums.length ; i++){
    //2번째는 초기값을 두번째 요소로
    for(let j = i+1 ; j < nums.length ; j++){
      //3번째는 초기값을 세번째 요소로  
      for(let k = j+1 ; k < nums.length ; k++){
        // 더한 숫자가 소수인가?
        let sum = nums[i] + nums[j] + nums[k];
        if (sum > 2) {
          if(prime(sum)){
            answer++;
          }
        }
      }
    }
  }
  return answer;
}

function prime(num){
  for(let i = 2 ; i <= num ** 0.5 ; i++){
    if(num % i == 0){
      return false;
    }
  }
  return true;
}